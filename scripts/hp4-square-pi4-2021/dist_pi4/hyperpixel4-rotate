#!/bin/bash

ORIENTATION=$1
DEVICE="generic ft5x06 (11)"
UDEV_FILE="/etc/udev/rules.d/98-hyperpixel4-square-calibration.rules"
DISP_FILE="/usr/share/dispsetup.sh"

function success() {
    echo -e "$(tput setaf 2)$1$(tput sgr0)"
}

function inform() {
    echo -e "$(tput setaf 6)$1$(tput sgr0)"
}

function warning() {
    echo -e "$(tput setaf 1)$1$(tput sgr0)"
}

function set_matrix {
    inform "Setting touch transform matrix: $1 $2 $3 $4 $5 $6";
    xinput set-prop "pointer:$DEVICE" "libinput Calibration Matrix" $1 $2 $3 $4 $5 $6 0 0 1

    inform "Saving touch settings to $UDEV_FILE";
    echo "ATTRS{name}==\"$DEVICE\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"$1 $2 $3 $4 $5 $6\"" | sudo tee $UDEV_FILE > /dev/null
    echo "ATTRS{name}==\"EP0110M09\", ENV{LIBINPUT_CALIBRATION_MATRIX}=\"$1 $2 $3 $4 $5 $6\"" | sudo tee -a $UDEV_FILE > /dev/null
}

function set_display {
    inform "Rotating display $1";
    xrandr --output DSI-1 --rotate $1

    inform "Persisting display settings to $DISP_FILE";
    sudo chown `whoami` $DISP_FILE
    python2 - <<EOF
import os
import stat
from screenlayout import xrandr

file = "$DISP_FILE"

template = ["#!/bin/sh",
"if grep -q okay /proc/device-tree/soc/v3d@7ec00000/status 2> /dev/null || grep -q okay /proc/device-tree/soc/firmwarekms@7e600000/status 2> /dev/null ; then",
"if %(xrandr)s --dryrun ; then",
"%(xrandr)s",
"fi",
"fi",
"exit 0"]

x = xrandr.XRandR()
x.load_from_x()
data = x.save_to_shellscript_string(template=template)
open(file, 'w').write(data)
os.chmod(file, stat.S_IRWXU)
EOF
    sudo chown root $DISP_FILE
    sudo chmod 755 $DISP_FILE
}

printf "HyperPixel 4: Square - Display/Touch Rotation\n"
warning "This rotate utility only works with the Raspberry Pi OS desktop version."

if [ "$DISPLAY" == "" ]; then
    warning "No DISPLAY variable set, trying :0.0"
    export DISPLAY=:0.0
fi

if [ "$ORIENTATION" == "right" ]; then
    set_display $ORIENTATION
    set_matrix 0 -1 1 1 0 0
    exit 0
fi

if [ "$ORIENTATION" == "left" ]; then
    set_display $ORIENTATION
    set_matrix 0 1 0 -1 0 1
    exit 0
fi

if [ "$ORIENTATION" == "inverted" ]; then
    set_display $ORIENTATION
    set_matrix 1 0 0 0 1 0
    exit 0
fi

if [ "$ORIENTATION" == "normal" ]; then
    set_display $ORIENTATION
    set_matrix -1 0 1 0 -1 1
    exit 0
fi

printf "Unsupported orientation: $ORIENTATION\n";
printf "Try one of: left, right, normal, inverted\n";
